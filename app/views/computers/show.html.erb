<% provide(:title, @current_computer.name) %>
<% provide(:computer, @current_computer.name) %>

<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-1 sidebar">
      <ul class="nav nav-sidebar" id="dataTabs">
        <li class="active"><a href="#stats" data-toggle="tab">Load Usage</a></li>
        <li><a href="#disk" data-toggle="tab">Disk Information</a></li>
        <li><a href="#network" data-toggle="tab">Network Information</a></li>
        <li><a href="#logs" data-toggle="tab">Logs</a></li>
        <li><a href="#export" data-toggle="tab">Export</a></li>
      </ul>
   </div>
   <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-1 main">
     <h1 class="page-header">Dashboard</h1>
     <div class="tab-content">
       <div class="tab-pane fade in active" id="stats">
        <div class="row">   
          <div class="col-md-7">
            <div id="stats_chart" style="height: 500px;">Loading...</div>
          </div>
          <div class="col-md-5">
              <div class="well">
                <h5><strong>Uptime:</strong> <%= display_uptime @current_computer.uptime %></h5>
              </div>
              <h4 id="program_date"><%= @programs[-1].timestamp if @programs.length != 0 %></h4>
            <table class="table table-condensed table-hover">
              <thead>
                <th>Name:</th>
                <th>CPU Usage:</th>
                <th>Memory Usage:</th>
                <th>User</th>
              </thead>
              <tbody id="program_table">
              <% @programs.each do |program| %>
                <tr>
                  <td><small><%= program.name %></small></td>
                  <td><%= program.load_usage %></td>
                  <td><%= program.memory_usage %></td>
                  <td><%= program.user %></td>
                </tr>
              <% end %>
              </tbody>
            </table>
          </div>
        </div>
       </div>
       <div class="tab-pane fade" id="disk">
         <ul class="nav nav-tabs">
           <li class="active"><a href="#disk_reads_tab" data-toggle="tab">Disk Reads</a></li>
           <li><a href="#disk_writes_tab" data-toggle="tab">Disk Writes</a></li>
           <li><a href="#disk_sizes_tab" data-toggle="tab">Disk Sizes</a></li>
         </ul>
         <div class="tab-content">
           <div class="tab-pane active" id="disk_reads_tab">
             <div class="row">
               <div class="col-md-7">
                 <div id="disk_reads">Loading...</div>
               </div>
               <div class="col-md-5">
                 <table class="table table-condensed table-hover">
                   <thead>
                     <th>Name:</th>
                     <th>Reads:</th>
                     <th>Writes:</th>
                     <th>User</th>
                   </thead>
                   <tbody id="disk_reads_table">
                     <% @programs.each do |program| %>
                       <tr>
                         <td><small><%= program.name %></small></td>
                         <td><%= display_disk_speed program.read %></td>
                         <td><%= display_disk_speed program.write %></td>
                         <td><%= program.user %></td>
                      </tr>
                     <% end %>
                   </tbody>
                 </table>
               </div>
             </div>
           </div>
           <div class="tab-pane" id="disk_writes_tab">
             <div class="row">
               <div class="col-md-7">
                <div id="disk_writes">Loading...</div>
               </div>
               <div class="col-md-5">
                 <table class="table table-condensed table-hover">
                   <thead>
                     <th>Name:</th>
                     <th>Reads:</th>
                     <th>Writes:</th>
                     <th>User</th>
                   </thead>
                   <tbody id="disk_writes_table">
                     <% @programs.each do |program| %>
                       <tr>
                         <td><small><%= program.name %></small></td>
                         <td><%= display_disk_speed program.read %></td>
                         <td><%= display_disk_speed program.write %></td>
                         <td><%= program.user %></td>
                      </tr>
                     <% end %>
                   </tbody>
                 </table>
               </div>
             </div>
           </div>
           <div class="tab-pane" id="disk_sizes_tab">
             <div id="partitions" style="width: 80%;">Loading...</div>
           </div>
         </div>
       </div>
       <div class="tab-pane fade" id="network">
         <ul class="nav nav-tabs">
           <li class="active"><a href="#interface_rx_tab" data-toggle="tab">Network Incoming</a></li>
           <li><a href="#interface_tx_tab" data-toggle="tab">Network Outgoing</a></li>
         </ul>
         <div class="tab-content">
           <div class="tab-pane active" id="interface_rx_tab">
             <div id="interface_rx" style="width: 80%; height: 500px;">Loading...</div>
           </div>
           <div class="tab-pane" id="interface_tx_tab">
             <div id="interface_tx" style="width: 80%; height: 500px;">Loading...</div>
           </div>
       </div>
       <div class="tab-pane fade" id="logs">Logs</div>
       <div class="tab-pane fade" id="export">Export</div>
     </div>
   </div>
  </div>
</div>
<script>
    $(function () {
        $('#dataTabs a:first').tab('show')
    });
    $("#program_date").html(new Date(<%= @programs[-1].timestamp * 1000 if @programs.length != 0 %>).toString());
</script>
<script>
var buttons =  [{
                type: 'minute',
                count: 15,
                text: '15m'
            }, {
                type: 'hour',
                count: 1,
                text: '1h',
            }, {
                type: 'hour',
                count: 12,
                text: '12h'
            }, {
                type: 'day',
                count: 1,
                text: '1d'
            }, {
                type: 'week',
                count: 1,
                text: '1w'
            }, {
                type: 'month', 
                count: 1,
                text: '1M'
            }, {
                type: 'all',
                text: 'ALL'
            }]; 

function disk_io_formatter() {
    var s = '<span style="font-size: 10px">' + Highcharts.dateFormat('%A, %b %e, %H:%M',new Date(this.x)) + '</span><br/>';
    $.each(this.points, function(i, point) { 
        var y_format = "";
        if (this.y < 1024) {
            y_format = this.y.toFixed(0) + "B/s";
        } else if (this.y < 1024 * 1024) {
            y_format = (this.y / 1024.0).toFixed(2) + "KB/s";
        } else if (this.y < 1024 * 1024 * 1024) {
            y_format = (this.y / 1024.0 / 1024.0).toFixed(2) + "MB/s";
        } else {
            y_format = (this.y / 1024.0 / 1024.0 / 1024.0).toFixed(2) + "GB/s"
        }
        s += '<span style="color:' + point.series.color + '">' + point.series.name + '</span>: <b>' + y_format + '</b><br/>';
    });
    return s;
}

function net_io_formatter() {
    var s = '<span style="font-size: 10px">' + Highcharts.dateFormat('%A, %b %e, %H:%M',new Date(this.x)) + '</span><br/>';
    $.each(this.points, function(i, point) { 
        var y_format = "";
        if (this.y < 1024) {
            y_format = this.y.toFixed(0) + "b/s";
        } else if (this.y < 1024 * 1024) {
            y_format = (this.y / 1024.0).toFixed(2) + "Kb/s";
        } else if (this.y < 1024 * 1024 * 1024) {
            y_format = (this.y / 1024.0 / 1024.0).toFixed(2) + "Mb/s";
        } else {
            y_format = (this.y / 1024.0 / 1024.0 / 1024.0).toFixed(2) + "Gb/s"
        }
        s += '<span style="color:' + point.series.color + '">' + point.series.name + '</span>: <b>' + y_format + '</b><br/>';
    });
    return s;
}
function program_table(data) {
    $("#program_table").empty();
    $("#program_date").html(new Date(data['date'] * 1000.0).toString());
    data['programs'].forEach(function(program) {
        $('#program_table').append('<tr><td><small>' + program.name + 
            '</small></td><td>' + program.load_usage + '</td><td>' + 
            program.memory_usage + '</td><td>' + 
            program.user + '</td></tr>');
    });
}

function disk_reads_table(data) {
    $("#disk_reads_table").empty();
    data['programs'].forEach(function(program) {
        $('#disk_reads_table').append('<tr><td><small>' + program.name + 
            '</small></td><td>' + display_disk_speed(program.read) + '</td><td>' + 
            display_disk_speed(program.write) + '</td><td>' + 
            program.user + '</td></tr>');
    });
}

function disk_writes_table(data) {
    $("#disk_writes_table").empty();
    data['programs'].forEach(function(program) {
        $('#disk_writes_table').append('<tr><td><small>' + program.name + 
            '</small></td><td>' + display_disk_speed(program.read) + '</td><td>' + 
            display_disk_speed(program.write) + '</td><td>' + 
            program.user + '</td></tr>');
    });
}

function display_disk_speed(bytes) {
    if (parseInt(bytes) > 1024 * 1024 * 1024)
        return (parseInt(bytes) / 1024 / 1024 / 1024).toFixed(2) + "GB/s";
    else if (parseInt(bytes) > 1024 * 1024)
        return (parseInt(bytes) / 1024 / 1024).toFixed(2) + "MB/s";
    else if (parseInt(bytes) > 1024)
        return (parseInt(bytes) / 1024).toFixed(2) + "KB/s"
    else
        return parseInt(bytes) + "B/s";
}
$.getJSON('/load_data/stats/<%= @current_computer.id %>', function(data) {
    Highcharts.setOptions({
        global: {
            useUTC: false
        }
    });
    // create the chart
    $('#stats_chart').highcharts('StockChart', {
        chart: {
            events: {
                load: function() {
                    var cpu = this.series[0];
                    var mem = this.series[1];
                    setInterval(function() {
                        $.getJSON('/load_data/stats/<%= @current_computer.id %>/current', function(data) {
                            cpu.addPoint([data['timestamp'], data['cpu']], true, true);    
                            mem.addPoint([data['timestamp'], data['mem']], true, true);    
                        });
                    }, 30000);
                }
            }
        },
        rangeSelector: {
            buttons: buttons,
            selected: 1
        },
        title: {
            text: 'Computer Usage'
        },
        yAxis: [{
            title: {
                text: 'Load Average'
            },
            height: 200,
            lineWidth: 2
        }, {
            title: {
                text: 'Memory Usage'
            },
            top: 300,
            height: 100,
            offset: 0,
            lineWidth: 2
        }],
        series: [{
            type: 'areaspline',
            name: 'Load Average',
            data: data['cpu'],
            point: {
                events: {
                    mouseOver: function() {
                        $.getJSON('/load_data/programs/<%= @current_computer.id %>?date=' + this.x + 
                                '&interval=' + this.series.closestPointRange + 
                                '&sort=cpu', program_table); 
                    }        
                }
            },
            tooltip: {
                valueDecimals: 2,
            }    
        }, {
            type: 'areaspline',
            name: 'Memory Usage',
            data: data['mem'],
            yAxis: 1,
            point: {
                events: {
                    mouseOver: function() {
                        $.getJSON('/load_data/programs/<%= @current_computer.id %>?date=' + this.x + 
                                '&interval=' + this.series.closestPointRange + 
                                '&sort=mem', program_table); 
                    }        
                }
            },
            tooltip: {
                pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} MB</b><br/>',
                valueDecimals: 0
            }
           
        }]
    });
});
$.getJSON('/load_data/partitions/<%= @current_computer.id %>', function(data) {
    var series = [];
    Object.keys(data).forEach(function(key) {
        series.push({name: key, 
            data: data[key],
            tooltip: {
                pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} GB</b><br/>',
                valueDecimals: 2
            }
        });
    });
    $('#partitions').highcharts('StockChart', {
        chart: {
            events: {
                load: function() {
                    var series = this.series;
                    setInterval(function() {
                        $.getJSON('/load_data/partitions/<%= @current_computer.id %>/current', function(data) {
                            for (var i = 0 ; i < series.length ; i++) {
                                series[i].addPoint([data['timestamp'], data[series[i].name]], true, true);
                            }
                        });
                    }, 30000);
                }
            }
        },
        title: {
            text: "Partitions"
        },        
        rangeSelector: {
            buttons: buttons,
            selected: 1
        },
        yAxis: {
            type: 'logarithmic',
            minotTickInterval: 0.1
        },
        series: series
    });     
});
$.getJSON('/load_data/disk_reads/<%= @current_computer.id %>', function(data) {
    var series = [];
    Object.keys(data).forEach(function(key) {
        series.push({name: key, 
            type: 'spline',
            data: data[key],
            point: {
                events: {
                    mouseOver: function() {
                        $.getJSON('/load_data/programs/<%= @current_computer.id %>?date=' + this.x + 
                            '&interval=' + this.series.closestPointRange + 
                            '&sort=read', disk_reads_table); 
                    }        
                }
            }
        });
    });

    $('#disk_reads').highcharts('StockChart', {
        chart: {
            events: {
                load: function() {
                    var series = this.series;
                    setInterval(function() {
                        $.getJSON('/load_data/disk_reads/<%= @current_computer.id %>/current', function(data) {
                            for (var i = 0 ; i < series.length ; i++) {
                                series[i].addPoint([data['timestamp'], data[series[i].name]], true, true);
                            }
                        });
                    }, 30000);
                }
            }
        },
        title: {
            text: "Disk Reads"
        },       
        yAxis: {
            min: 0
        },
        tooltip: {
            formatter: disk_io_formatter
        },
        rangeSelector: {
            buttons: buttons,
            selected: 1
        },
        series: series
    });     
});
$.getJSON('/load_data/disk_writes/<%= @current_computer.id %>', function(data) {
    var series = [];
    Object.keys(data).forEach(function(key) {
        series.push({name: key, 
            type: 'spline',
            data: data[key],
            point: {
                events: {
                    mouseOver: function() {
                        $.getJSON('/load_data/programs/<%= @current_computer.id %>?date=' + this.x + 
                            '&interval=' + this.series.closestPointRange + 
                            '&sort=write', disk_writes_table); 
                    }        
                }
            }

        });
    });

    $('#disk_writes').highcharts('StockChart', {
        chart: {
            events: {
                load: function() {
                    var series = this.series;
                    setInterval(function() {
                        $.getJSON('/load_data/disk_writes/<%= @current_computer.id %>/current', function(data) {
                            for (var i = 0 ; i < series.length ; i++) {
                                series[i].addPoint([data['timestamp'], data[series[i].name]], true, true);
                            }
                        });
                    }, 30000);
                }
            }
        },
        title: {
            text: "Disk Writes"
        },       
        yAxis: {
            min: 0
        },
        tooltip: {
            formatter: disk_io_formatter
        },
        rangeSelector: {
            buttons: buttons,
            selected: 1
        },
        series: series
    });
});
$.getJSON('/load_data/interfaces_rx/<%= @current_computer.id %>', function(data) {
    var series = [];
    Object.keys(data).forEach(function(key) {
        series.push({name: key, 
            type: 'spline',
            data: data[key],
            tooltip: {
                pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} kb/s</b><br/>',
                valueDecimals: 0
            }
        });
    });

    $('#interface_rx').highcharts('StockChart', {
        chart: {
            events: {
                load: function() {
                    var series = this.series;
                    setInterval(function() {
                        $.getJSON('/load_data/interfaces_rx/<%= @current_computer.id %>/current', function(data) {
                            for (var i = 0 ; i < series.length ; i++) {
                                series[i].addPoint([data['timestamp'], data[series[i].name]], true, true);
                            }
                        });
                    }, 30000);
                }
            }
        },
        title: {
            text: "Interfaces Incoming"
        },       
        yAxis: {
            min: 0
        },
        tooltip: {
            formatter: net_io_formatter
        },
        rangeSelector: {
            buttons: buttons,
            selected: 1
        },
        series: series
    });     
});
$.getJSON('/load_data/interfaces_tx/<%= @current_computer.id %>', function(data) {
    var series = [];
    Object.keys(data).forEach(function(key) {
        series.push({name: key, 
            type: 'spline',
            data: data[key],
            tooltip: {
                pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} Kb/s</b><br/>',
                valueDecimals: 0
            }
        });
    });
    $('#interface_tx').highcharts('StockChart', {
        chart: {
            events: {
                load: function() {
                    var series = this.series;
                    setInterval(function() {
                        $.getJSON('/load_data/interfaces_rx/<%= @current_computer.id %>/current', function(data) {
                            for (var i = 0 ; i < series.length ; i++) {
                                series[i].addPoint([data['timestamp'], data[series[i].name]], true, true);
                            }
                        });
                    }, 30000);
                }
            }
        },
        title: {
            text: "Interfaces Outgoing"
        },       
        yAxis: {
            min: 0
        },
        tooltip: {
            formatter: net_io_formatter,
        },
        rangeSelector: {
            buttons: buttons,
            selected: 1
        },
        series: series
    });     
});
</script>
